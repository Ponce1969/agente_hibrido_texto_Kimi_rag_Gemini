

services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    volumes:
      - ./src:/app/src
      - ./gunicorn.conf.py:/app/gunicorn.conf.py
      - backend_data:/app/data
      - models_cache:/root/.cache
    command: gunicorn src.main:app --config gunicorn.conf.py
    env_file:
      - .env
    environment:
      - TOKENIZERS_PARALLELISM=${TOKENIZERS_PARALLELISM:-false}
      - OMP_NUM_THREADS=${OMP_NUM_THREADS:-1}
      - INTRA_OP_PARALLELISM_THREADS=${INTRA_OP_PARALLELISM_THREADS:-1}
      - INTER_OP_PARALLELISM_THREADS=${INTER_OP_PARALLELISM_THREADS:-1}

  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "${FRONTEND_PORT:-8501}:8501"
    environment:
      - BACKEND_URL=${BACKEND_URL:-http://backend:8000/api/v1}
      - PYTHONPATH=/app
    volumes:
      - ./src:/app/src
      - backend_data:/app/data
    command: streamlit run src/adapters/streamlit/app.py --server.port 8501 --server.address 0.0.0.0
    depends_on:
      - backend
    env_file:
      - .env

  postgres:
    image: pgvector/pgvector:pg16
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT_EXTERNAL:-5432}:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  backend_data:
  models_cache:
    # Define el volumen para la persistencia de la base de datos
  pg_data:
    # Volumen para datos de PostgreSQL
